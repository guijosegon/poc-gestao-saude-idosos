// <auto-generated />
using System;
using System.Collections.Generic;
using GestaoSaudeIdosos.Infra.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using AppContext = GestaoSaudeIdosos.Infra.Contexts.AppContext;

#nullable disable

namespace GestaoSaudeIdosos.Infra.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20251028031415_Release_02")]
    partial class Release_02
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.Campo", b =>
                {
                    b.Property<int>("CampoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CampoId"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Chave")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Opcoes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("TextoAjuda")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("CampoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Campos");
                });

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.Formulario", b =>
                {
                    b.Property<int>("FormularioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FormularioId"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Chave")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("FormularioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Formularios");
                });

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.FormularioCampo", b =>
                {
                    b.Property<int>("FormularioCampoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FormularioCampoId"));

                    b.Property<int>("CampoId")
                        .HasColumnType("integer");

                    b.Property<string>("Chave")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FormularioId")
                        .HasColumnType("integer");

                    b.Property<bool>("Obrigatorio")
                        .HasColumnType("boolean");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer");

                    b.HasKey("FormularioCampoId");

                    b.HasIndex("CampoId");

                    b.HasIndex("FormularioId");

                    b.ToTable("FormularioCampos");
                });

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.FormularioCampoValor", b =>
                {
                    b.Property<int>("FormularioCampoValorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FormularioCampoValorId"));

                    b.Property<int?>("CampoId")
                        .HasColumnType("integer");

                    b.Property<string>("Chave")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataPreenchimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FormularioCampoId")
                        .HasColumnType("integer");

                    b.Property<int>("FormularioId")
                        .HasColumnType("integer");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FormularioCampoValorId");

                    b.HasIndex("CampoId");

                    b.HasIndex("FormularioCampoId");

                    b.HasIndex("FormularioId");

                    b.ToTable("FormularioCampoValores");
                });

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.FormularioResultado", b =>
                {
                    b.Property<int>("FormularioResultadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FormularioResultadoId"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Chave")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataPreenchimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FormularioId")
                        .HasColumnType("integer");

                    b.Property<int>("PacienteId")
                        .HasColumnType("integer");

                    b.HasKey("FormularioResultadoId");

                    b.HasIndex("FormularioId");

                    b.HasIndex("PacienteId");

                    b.ToTable("FormularioResultados");
                });

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.Grafico", b =>
                {
                    b.Property<int>("GraficoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GraficoId"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GraficoId");

                    b.ToTable("Graficos");
                });

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.Paciente", b =>
                {
                    b.Property<int>("PacienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PacienteId"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Chave")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CondicoesCronicas")
                        .HasColumnType("text");

                    b.Property<string>("CpfRg")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DietasRestricoes")
                        .HasColumnType("text");

                    b.Property<int?>("FormularioId")
                        .HasColumnType("integer");

                    b.Property<string>("HistoricoCirurgico")
                        .HasColumnType("text");

                    b.Property<int>("Idade")
                        .HasColumnType("integer");

                    b.Property<string>("ImagemPerfil")
                        .HasColumnType("text");

                    b.Property<int>("Mobilidade")
                        .HasColumnType("integer");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ResponsavelId")
                        .HasColumnType("integer");

                    b.Property<int>("RiscoQueda")
                        .HasColumnType("integer");

                    b.Property<int>("Sexo")
                        .HasColumnType("integer");

                    b.Property<int?>("UsuarioCadastroId")
                        .HasColumnType("integer");

                    b.HasKey("PacienteId");

                    b.HasIndex("FormularioId");

                    b.HasIndex("ResponsavelId");

                    b.HasIndex("UsuarioCadastroId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UsuarioId"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Chave")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CpfRg")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagemPerfil")
                        .HasColumnType("text");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Perfil")
                        .HasColumnType("integer");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.Campo", b =>
                {
                    b.HasOne("GestaoSaudeIdosos.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.Formulario", b =>
                {
                    b.HasOne("GestaoSaudeIdosos.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.FormularioCampo", b =>
                {
                    b.HasOne("GestaoSaudeIdosos.Domain.Entities.Campo", "Campo")
                        .WithMany()
                        .HasForeignKey("CampoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestaoSaudeIdosos.Domain.Entities.Formulario", "Formulario")
                        .WithMany("Campos")
                        .HasForeignKey("FormularioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campo");

                    b.Navigation("Formulario");
                });

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.FormularioCampoValor", b =>
                {
                    b.HasOne("GestaoSaudeIdosos.Domain.Entities.Campo", null)
                        .WithMany("FormularioCampos")
                        .HasForeignKey("CampoId");

                    b.HasOne("GestaoSaudeIdosos.Domain.Entities.FormularioCampo", "FormularioCampo")
                        .WithMany()
                        .HasForeignKey("FormularioCampoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestaoSaudeIdosos.Domain.Entities.Formulario", "Formulario")
                        .WithMany()
                        .HasForeignKey("FormularioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formulario");

                    b.Navigation("FormularioCampo");
                });

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.FormularioResultado", b =>
                {
                    b.HasOne("GestaoSaudeIdosos.Domain.Entities.Formulario", "Formulario")
                        .WithMany()
                        .HasForeignKey("FormularioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestaoSaudeIdosos.Domain.Entities.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formulario");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.Paciente", b =>
                {
                    b.HasOne("GestaoSaudeIdosos.Domain.Entities.Formulario", null)
                        .WithMany("Pacientes")
                        .HasForeignKey("FormularioId");

                    b.HasOne("GestaoSaudeIdosos.Domain.Entities.Usuario", "Responsavel")
                        .WithMany()
                        .HasForeignKey("ResponsavelId");

                    b.HasOne("GestaoSaudeIdosos.Domain.Entities.Usuario", "UsuarioCadastro")
                        .WithMany()
                        .HasForeignKey("UsuarioCadastroId");

                    b.Navigation("Responsavel");

                    b.Navigation("UsuarioCadastro");
                });

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.Campo", b =>
                {
                    b.Navigation("FormularioCampos");
                });

            modelBuilder.Entity("GestaoSaudeIdosos.Domain.Entities.Formulario", b =>
                {
                    b.Navigation("Campos");

                    b.Navigation("Pacientes");
                });
#pragma warning restore 612, 618
        }
    }
}
